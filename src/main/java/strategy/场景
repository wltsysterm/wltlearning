策略模式（注入哪个用哪个）
在实际中使用的还是挺多的，先来看一个场景：某个市场人员接到单儿后的报价策略，
保价策略很复杂，但是可以简单做如下归类：
新客户小批量报价
新客户大批量报价
老客户小批量报价
老客户大批量报价
具体选用哪个报价策略，这需要根据实际情况来确定，这时候采用策略模式即可解决这个问题。
这个问题中，如果我们不采用策略模式会怎样处理呢？
很自然的会想到使用if判断，或者switch…case…来解决，根据不同的用户确定不同的报价。
类似于如下的结构：
public double getPrice(String type, double price) {

    if(type.equals("新客户小批量")) {
        // 处理报价逻辑
        return price;
    } else if(type.equals("新客户大批量")) {
        // 处理报价逻辑
        return price;
    }
    //......
}

或者使用switch….case….，但是很明显有个弊端，这个类型特别多，而且每个类型里面还有
自己的算法，如果算法比较复杂的话整个条件的控制代码会变得很长，难以维护。
为了解决这个问题，我们可以使用策略模式。
策略模式：即对应于解决某一个问题的一个算法族，允许用户从该算法族中人选个一个算法解
决某一问题，同时可以方便的更换算法或者增加新的算法，并且由客户端决定调用哪个算法。

首先有个策略的接口，然后不同的四个不同的策略分别实现这个接口中的方法，
在这里是报价的方法，然后定义一个上下文类，用来操作具体的具体的策略，
客户端只需要与这个上下文打交道即可，即只要将策略传给上下文类，就可以执行相应的策略，
后期如果需要修改或者添加，只需要修改具体的策略实现类或者新添加一个实现类即可，便于维护。
下面来看下程序的实现。

在实际中，策略模式在spring中也有用到，通过注解@Resource就是使用该模式，注入哪个就使用哪个。
